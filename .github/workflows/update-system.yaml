name: Update system on AWS infrastructure

on:
  push:
    branches:
      - main

jobs:
  update-system:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
      STACK_NAME: "stack-gbaas-prod-${{ vars.AWS_REGION }}-1"
      COREBUCKET_NAME: "corebucket-gbaas-prod-${{ vars.AWS_REGION }}-1"
      TEMPLATE_FILE: "./deploy.yaml"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check CloudFormation Stack
        run: |
          if aws cloudformation describe-stacks --stack-name $STACK_NAME; then
            echo "Valid CloudFormation Stack [$STACK_NAME] found. Starting CI/CD Pipe..."
          else
            echo "CloudFormation Stack [$STACK_NAME] not available in a stable state. Exiting CI/CD Pipe..."
            exit 1
          fi

      - name: Execute CloudFormation Stack
        run: |
            aws cloudformation update-stack --stack-name $STACK_NAME \
            --template-body file://$TEMPLATE_FILE \
            --capabilities CAPABILITY_IAM \
            --parameters ParameterKey=BackupEntities,ParameterValue="${{ vars.BACKUP_ENTITIES }}" | tee $OUTPUT_FILE
            
            aws cloudformation wait stack-update-complete --stack-name $STACK_NAME

            OUTPUT_S3=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[0].OutputValue")
            OUTPUT_LAMBDA=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[1].OutputValue")
            
            echo "S3_NAME=${OUTPUT_S3}" >> $GITHUB_ENV
            echo "LAMBDA_NAME=${OUTPUT_LAMBDA}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo snap install go --classic

      - name: Compile and upload function
        run: |
          cd function
          CGO_ENABLED=0 GOOS=linux go build -o ../main main.go
          cd ..
          zip backupfn.zip main
          aws s3 cp backupfn.zip s3://${{ env.S3_NAME }}/backupfn.zip
          
      - name: Upload Backup Service
        run: |
          aws lambda update-function-code --function-name ${{ env.LAMBDA_NAME }} \
          --s3-bucket s3://${{ env.S3_NAME }} \
          --s3-key backupfn.zip

      - name: Upload Webapp
        run: |
          aws s3 cp web s3://${{ env.S3_NAME }}/web --recursive
